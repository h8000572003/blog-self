<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>元件 on 阿忠程式之路</title>
    <link>https://h8000572003.github.io/blog-self/tags/%E5%85%83%E4%BB%B6/</link>
    <description>Recent content in 元件 on 阿忠程式之路</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Mon, 29 Aug 2022 23:05:43 +0800</lastBuildDate><atom:link href="https://h8000572003.github.io/blog-self/tags/%E5%85%83%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Telegram</title>
      <link>https://h8000572003.github.io/blog-self/tw/post/telegram/</link>
      <pubDate>Mon, 29 Aug 2022 23:05:43 +0800</pubDate>
      
      <guid>https://h8000572003.github.io/blog-self/tw/post/telegram/</guid>
      <description>Telegram是跨平台的即時通訊軟體，其用戶端是自由及開放原始碼軟體，但伺服器端是專有軟體。使用者可以相互交換加密與自毀訊息，傳送相片、影片等所有類型檔案。官方提供手機版、電腦版和網頁版等多種平台用戶端；同時官方開放應用程式介面，因此擁有許多第三方的用戶端可供選擇
專案使用目的 透過即時訊息，即刻掌握系統狀態 透過指令進行操作服務 程式設計規則 建立BotCmdService(機器人指令服務)，註冊機器人命令規則，透過呼叫BotCmdService.exeCmd方式處理該命令方式。
/** * 機器人命令 * @author andy * */ public interface IBotCmd { /** * * @param arg 命令 * @param context 訊息上下文 * @return 命令回訊方式 */ BotCmdResponse execute(String arg, BotContext context); } </description>
    </item>
    
    <item>
      <title>Hitachi Content Platform 雲端平台</title>
      <link>https://h8000572003.github.io/blog-self/tw/post/hcp/</link>
      <pubDate>Wed, 10 Aug 2022 20:05:29 +0800</pubDate>
      
      <guid>https://h8000572003.github.io/blog-self/tw/post/hcp/</guid>
      <description>Hitachi Content Platform 此為Hitachi提供之檔案放置雲端平台之解決方案，參考API說明書，撰寫該元件之共用元件建立
提供以下服務
新增 刪除 更新 查詢 查詢範例 @Test void test_get_file_then_HcpGet_then_file() { HcpGet hcpDownloadInfo = new HcpGet(); String restPath = HcpUtil.toRestPath(&amp;#34;x.pdf&amp;#34;, &amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;, &amp;#34;3&amp;#34;, &amp;#34;4&amp;#34;); hcpDownloadInfo.setPath(restPath); GetHcpInfo execute; try { execute = hcpService.execute(hcpDownloadInfo); String size = execute.getSize(); assertThat(size).isNotBlank(); } catch (HcpCodeExcepton e) { fail(&amp;#34;&amp;#34;); } } 刪除範例 @Test void test_delet_file_then_HcpGet_then_ok() { HcpDelete cmd = new HcpDelete(); String restPath = HcpUtil.toRestPath(&amp;#34;x.pdf&amp;#34;, &amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;, &amp;#34;3&amp;#34;, &amp;#34;4&amp;#34;); cmd.setPath(restPath); try { BaseHcpInfo execute = hcpService.</description>
    </item>
    
    <item>
      <title>代碼元件</title>
      <link>https://h8000572003.github.io/blog-self/tw/post/common-prop/</link>
      <pubDate>Wed, 10 Aug 2022 20:05:29 +0800</pubDate>
      
      <guid>https://h8000572003.github.io/blog-self/tw/post/common-prop/</guid>
      <description>通用型代碼元件 解決問題：處理多來源之代碼元件統一方式處理， 並提供並提供代碼使用範圍，使用範圍定義為如下
資料範圍(CacheLoader&amp;lt;String, List &amp;lt;IProperties&amp;gt;&amp;gt;) 來源定義範圍內(例如：原有 A‘B與C 僅能修改此範圍內，且無法刪除，刪除則恢復預設值) 使用範圍:程式上使用參數，不得刪除
可擴充類型(例如：原有 A‘B與C還能增加額外項目) 使用範圍:類似帳號資料，管理者資料無法刪除，且可以增加額外項目
無基礎值(例如：原有 A‘B與C還能增加額外項目，且能全部刪除) 使用範圍: 資料可以任意清除
快取方式(IPropertieServiceHolder) 定時清除 使用範圍:資料有可能更新,特定時間清除
永久使用快取 使用範圍:資料永久不改變，沒有清除需要
不使用快取 使用範圍:資料強調正確性，可不使用快取
詳細說明參考 https://github.com/h8000572003/coomon-prooptics</description>
    </item>
    
  </channel>
</rss>
